{"version":3,"sources":["logo.svg","SortingAlgoAnimations/insertionSort.js","SortingAlgoAnimations/selectionSort.js","SortingAlgoAnimations/bubbleSort.js","SortingVisualization.js","App.js","reportWebVitals.js","index.js"],"names":["insertionSort","array","animations","i","length","key","j","push","curr","pred","selectionSort","currIndex","type","minValue","minIndex","newIndex","currValue","newValue","tmp","console","log","bubbleSort","swaps","prevIndex","prevValue","SortingVisualization","state","arraySize","resetArray","getRandomInt","setState","arrayBars","document","getElementsByClassName","style","backgroundColor","max","Math","floor","random","handleInsertionSort","this","disableButtons","forEach","obj","index","setTimeout","currBarStyle","currBarNewHeight","height","enableButtons","handleSelectionSort","newBarStyle","newBarNewHeight","handleBubbleSort","prevBarStyle","prevBarNewHeight","buttons","disabled","className","onClick","map","value","width","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.39fba9b0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export function insertionSort(array){\n    const animations = []\n    for(let i = 1; i < array.length; i++){\n        const key = array[i];\n        let j = i - 1;\n        while(j >= 0 && key < array[j]){\n            animations.push({curr: [j+1, array[j+1]], pred: [j, array[j]] })\n            array[j+1] = array[j]\n            j-=1\n        }\n        animations.push({curr: [j+1, array[j+1]], pred: [i, key] })\n        array[j+1] = key\n    }\n    return animations\n}\n","export function selectionSort(array) {\n    const animations = []\n    for (let i = 0; i < array.length - 1; i++) {\n        animations.push({currIndex: i, type: 'single'})\n        let minValue = array[i]\n        let minIndex = i\n        for (let j = i + 1; j < array.length; j++) {\n            animations.push({currIndex: j, type: 'single'})\n            if (array[j] < minValue) {\n                minValue = array[j]\n                minIndex = j\n            }\n        }\n        if(minIndex !== i) {\n            animations.push({currIndex: i, newIndex: minIndex, currValue: array[i], newValue: array[minIndex], type: 'swap'})\n        } else {\n            animations.push({currIndex: i, type: 'no-swap'})\n        }\n        let tmp = array[i]\n        array[i] = array[minIndex]\n        array[minIndex] = tmp\n    }\n    animations.push({currIndex: array.length - 1, type: 'no-swap'})\n    console.log(animations)\n    return animations\n}","export function bubbleSort(array) {\n    let animations = []\n    let swaps = 1\n    while (swaps > 0) {\n        swaps = 0\n        animations.push({currIndex: 0, currValue: array[0], type: 'single'})\n        for (let i = 1; i < array.length; i++) {\n            animations.push({currIndex: i, currValue: array[i], type: 'single'})\n            if (array[i] < array[i - 1]) {\n                animations.push({currIndex: i, prevIndex: i - 1, currValue: array[i], prevValue: array[i - 1], type: 'swap'})\n                let tmp = array[i]\n                array[i] = array[i - 1]\n                array[i - 1] = tmp\n                swaps = swaps + 1\n            }\n        }\n        console.log(swaps)\n    }\n    return animations\n}\n","import React, { Component } from 'react';\n// import {mergeSort} from './SortingAlgos/mergeSort';\nimport {insertionSort} from './SortingAlgoAnimations/insertionSort';\nimport {selectionSort} from './SortingAlgoAnimations/selectionSort';\nimport {bubbleSort} from './SortingAlgoAnimations/bubbleSort';\nimport {mergeSortHelper} from './SortingAlgoAnimations/mergeSort';\nimport './SortingVisualization.css';\n\nexport class SortingVisualization extends Component {\n    state = {\n        array : [ 169,240,50,177,240],\n        arraySize: 25\n    }\n    //arraySize usually 100,\n    componentDidMount(){\n        this.resetArray()\n    }\n\n    resetArray = () => {\n        //reset array values\n        const array = [];\n        for(let i =0; i<this.state.arraySize; i++){\n            array.push(this.getRandomInt(300));\n        }\n        this.setState({array: array})\n        //reset color of bars\n        const arrayBars = document.getElementsByClassName('array-bar');\n        for (let i=0; i<arrayBars.length; i++){\n            arrayBars[i].style.backgroundColor = '#00BFFF';\n        }\n    }\n\n    getRandomInt = (max) => {\n        return Math.floor(Math.random() * Math.floor(max))\n    }\n\n    handleInsertionSort = function () {\n        this.disableButtons();\n        const animations = insertionSort(this.state.array);\n        const arrayBars = document.getElementsByClassName('array-bar');\n        animations.forEach((obj, index) => {\n            //current vs predecessor\n            setTimeout(() => {\n                const currBarStyle = arrayBars[obj.curr[0]].style;\n                const predBarStyle = arrayBars[obj.pred[0]].style;  \n                currBarStyle.backgroundColor = 'red';\n                // predBarStyle.backgroundColor = 'red';\n                const currBarNewHeight = obj.pred[1];\n                currBarStyle.height = `${currBarNewHeight}px`;\n                setTimeout(() => {\n                    currBarStyle.backgroundColor = '#00BFFF';\n                    // predBarStyle.backgroundColor = '#4169E1';\n                }, 35);\n                //cannot access the 'this' keyword in Promise but this works too\n                //enable buttons after (most) animations play\n                if (index + 1 === animations.length){\n                    this.enableButtons()\n                    setTimeout(() => {\n                        for (let obj of arrayBars){\n                            obj.style.backgroundColor = '#4169E1'\n                        }\n                    }, 35)\n                }\n            }, index * 35);\n        });\n    }\n\n    handleSelectionSort = function () {\n        this.disableButtons();\n        const animations = selectionSort(this.state.array);\n        const arrayBars = document.getElementsByClassName('array-bar');\n        animations.forEach((obj, index) => {\n            //current vs predecessor\n            setTimeout(() => {\n                const currBarStyle = arrayBars[obj.currIndex].style;\n                if(obj.type === 'single'){\n                    currBarStyle.backgroundColor = 'red';\n                    setTimeout(() => {\n                        currBarStyle.backgroundColor = '#00BFFF';\n                    }, 35)\n                } else if(obj.type === 'no-swap'){\n                    setTimeout(() => {\n                        currBarStyle.backgroundColor = '#4169E1';\n                    }, 35)\n                } else {\n                    const newBarStyle = arrayBars[obj.newIndex].style;\n                    currBarStyle.backgroundColor = 'lightgreen';\n                    newBarStyle.backgroundColor = 'lightgreen';\n                    const currBarNewHeight = obj.newValue;\n                    const newBarNewHeight = obj.currValue;\n                    currBarStyle.height = `${currBarNewHeight}px`;\n                    newBarStyle.height = `${newBarNewHeight}px`;\n                    setTimeout(() => {\n                        currBarStyle.backgroundColor = '#4169E1';\n                        newBarStyle.backgroundColor = '#00BFFF';\n                    }, 35)\n                }\n                if (index === animations.length - 1){\n                    this.enableButtons()\n                }\n            }, index*35)\n        })\n    }\n\n    handleBubbleSort = function() {\n        this.disableButtons();\n        const animations = bubbleSort(this.state.array);\n        const arrayBars = document.getElementsByClassName('array-bar');\n        animations.forEach((obj, index) => {\n            setTimeout(() => {\n                const currBarStyle = arrayBars[obj.currIndex].style;\n                if(obj.type === 'single'){\n                    currBarStyle.backgroundColor = 'red';\n                    setTimeout(() => {\n                        currBarStyle.backgroundColor = '#00BFFF';\n                    }, 35)\n                } else {\n                    const prevBarStyle = arrayBars[obj.prevIndex].style;\n                        currBarStyle.backgroundColor = 'lightgreen';\n                        prevBarStyle.backgroundColor = 'lightgreen';\n                        const currBarNewHeight = obj.prevValue;\n                        const prevBarNewHeight = obj.currValue;\n                        currBarStyle.height = `${currBarNewHeight}px`;\n                        prevBarStyle.height = `${prevBarNewHeight}px`;\n                        setTimeout(() => {\n                            currBarStyle.backgroundColor = '#00BFFF';\n                            prevBarStyle.backgroundColor = '#00BFFF';\n                        }, 35)\n                }\n                if (index === animations.length - 1){\n                    this.enableButtons()\n                    setTimeout(() => {\n                        for (let obj of arrayBars){\n                            obj.style.backgroundColor = '#4169E1'\n                        }\n                    }, 35)\n                }\n            }, index * 35)\n        })\n    }\n\n    disableButtons = () => {\n        //disable buttons while animation plays\n        let buttons = document.getElementsByClassName('button');\n        for(let i = 0; i < buttons.length; i++){\n            buttons[i].disabled = true;\n        }\n    }\n\n    enableButtons = () => {\n        //enable buttons after animation plays\n        let buttons = document.getElementsByClassName('button');\n        for(let i = 0; i < buttons.length; i++){\n            buttons[i].disabled = false;\n        }\n    }\n\n    render() {\n        const arrayBars = this.state.array\n        return (\n            <div className=\"page-container\">\n                <h2>Sorting Algorithm Visualizer</h2>\n                <p>This is just a fun side project I wanted to do. More algorithms will be added soon!</p>\n                <div className=\"button-container\">\n                    <button    \n                        className=\"button\"\n                        onClick={this.resetArray}>Reset Array</button>\n                    {/* <button    \n                        className=\"button\"\n                        onClick={() => {\n                            console.log(`%c ${this.state.array}`, 'color:green')\n                            this.handleMergeSort()\n                        }}>Merge Sort</button> */}\n                    <button    \n                        className=\"button\"\n                        onClick={() => {this.handleSelectionSort()}}>Selection Sort</button>\n                    <button    \n                        className=\"button\"\n                        onClick={() => this.handleInsertionSort()}>Insertion Sort</button>\n                    <button    \n                        className=\"button\"\n                        onClick={() => this.handleBubbleSort()}>Bubble Sort</button>\n                </div>\n                <div className=\"array-container\">\n                    {arrayBars.map((value, index) => (\n                        <div \n                            className = \"array-bar\" \n                            key = {index}\n                            style={{height: `${value}px`, width: `${80/this.state.arraySize}vw`}}></div>\n                    ))}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SortingVisualization\n","import logo from './logo.svg';\nimport './App.css';\nimport SortingVisualization from './SortingVisualization';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualization />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}