{"version":3,"sources":["logo.svg","SortingAlgoAnimations/mergeSort.js","SortingAlgoAnimations/insertionSort.js","SortingVisualization.js","App.js","reportWebVitals.js","index.js"],"names":["mergeSortHelper","array","arrayWithIndex","map","value","index","push","console","log","mergeSort","finalArray","finalAnimations","animationArray","length","middleIndex","Math","floor","left","slice","right","sortedArray","i","j","curr","pred","side","insertionSort","animations","key","SortingVisualization","state","arraySize","resetArray","getRandomInt","setState","arrayBars","document","getElementsByClassName","style","backgroundColor","max","random","handleMergeSort","this","forEach","obj","currBarStyle","predBarStyle","setTimeout","currBarNewHeight","predBarNewHeight","height","handleInsertionSort","disableButtons","enableButtons","buttons","disabled","className","onClick","width","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d14c62a7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export function mergeSortHelper(array){\n    let arrayWithIndex = []\n    let animations = []\n    array.map((value, index) => {\n        return arrayWithIndex.push([index, value])\n    })\n    console.log(arrayWithIndex)\n    let [finalArray, finalAnimations] = mergeSort(arrayWithIndex, animations)\n    console.log(finalArray)\n    console.log(finalAnimations)\n    return finalAnimations\n}\n\nexport function mergeSort(array, animationArray){\n    // console.log(animationArray)\n    if (array.length <= 1) {\n        return [array, animationArray]\n    }\n    const middleIndex = Math.floor(array.length/2)\n    const left = mergeSort(array.slice(0, middleIndex), animationArray)[0];\n    const right  = mergeSort(array.slice(middleIndex), animationArray)[0];\n    // console.log(\"left\")\n    // console.log(left)\n    // console.log(\"right\")\n    // console.log(right)\n    const sortedArray = [];\n    const animations = [];\n    let i = 0, j = 0\n    while(i < left.length && j < right.length){\n        // console.log(left[i] +', '+ right[j])\n        if(left[i][1] < right[j][1]){\n            // console.log('push left')\n            sortedArray.push(left[i++])\n            if(left[i] !== 'undefined'){\n                animationArray.push({curr: right[j], pred: sortedArray[sortedArray.length-1], side: 'left'})\n            }\n        } else {\n            sortedArray.push(right[j++])\n            if(right[j] !== 'undefined'){\n                animationArray.push({curr: left[i], pred: sortedArray[sortedArray.length-1], side: 'right'})\n            }\n            //  console.log(right[j])\n        }\n        console.log(animationArray)\n        // console.log(sortedArray)\n    }\n    //one term left\n    while(i < left.length) {\n        sortedArray.push(left[i++])\n        // if(left[i] !== 'undefined'){\n        //     animationArray.push({curr: [0,0], pred: sortedArray[sortedArray.length-1], side: 'left'})\n        // }\n    }\n    while(j < right.length){\n        sortedArray.push(right[j++])\n        // if(right[j] !== 'undefined'){\n        //     animationArray.push({curr: [0,0], pred: sortedArray[sortedArray.length-1], side: 'right'})\n        // }\n    }\n    console.log('return')\n    return [sortedArray, animationArray]\n} ","export function insertionSort(array){\n    const animations = []\n    for(let i = 1; i < array.length; i++){\n        const key = array[i];\n        let j = i - 1;\n        while(j >= 0 && key < array[j]){\n            animations.push({curr: [j+1, array[j+1]], pred: [j, array[j]] })\n            array[j+1] = array[j]\n            j-=1\n        }\n        animations.push({curr: [j+1, array[j+1]], pred: [i, key] })\n        array[j+1] = key\n    }\n    return animations\n}\n","import React, { Component } from 'react';\nimport {mergeSortHelper} from './SortingAlgoAnimations/mergeSort';\nimport {mergeSort} from './SortingAlgos/mergeSort';\nimport {insertionSort} from './SortingAlgoAnimations/insertionSort';\nimport './SortingVisualization.css';\n\nexport class SortingVisualization extends Component {\n    state = {\n        array : [38,27,43,3,9,82,10],\n        arraySize: 50\n    }\n    //arraySize usually 100,\n    componentDidMount(){\n        //this.resetArray()\n    }\n\n    resetArray = () => {\n        //reset array values\n        const array = [];\n        for(let i =0; i<this.state.arraySize; i++){\n            array.push(this.getRandomInt(300));\n        }\n        this.setState({array: array})\n        //reset color of bars\n        const arrayBars = document.getElementsByClassName('array-bar');\n        for (let i=0; i<arrayBars.length; i++){\n            arrayBars[i].style.backgroundColor = '#00BFFF';\n        }\n    }\n\n    getRandomInt = (max) => {\n        return Math.floor(Math.random() * Math.floor(max))\n    }\n\n    handleMergeSort = function(){\n        const animations = mergeSortHelper(this.state.array);\n        const arrayBars = document.getElementsByClassName('array-bar');\n        animations.forEach((obj, index) => {\n            const currBarStyle = arrayBars[obj.curr[0]].style;\n            const predBarStyle = arrayBars[obj.pred[0]].style;\n            setTimeout(() => {\n                currBarStyle.backgroundColor = 'red';\n                predBarStyle.backgroundColor = 'red';\n                const currBarNewHeight = obj.pred[1];\n                const predBarNewHeight = obj.curr[1];\n                currBarStyle.height = `${currBarNewHeight}px`;\n                predBarStyle.height = `${predBarNewHeight}px`;\n                setTimeout(() => {\n                    currBarStyle.backgroundColor = '#4169E1';\n                    predBarStyle.backgroundColor = '#4169E1';\n                }, 500);\n            }, index * 600);\n        })\n    }\n\n    handleInsertionSort = function () {\n        this.disableButtons();\n        const animations = insertionSort(this.state.array);\n        const arrayBars = document.getElementsByClassName('array-bar');\n        animations.forEach((obj, index) => {\n            //current vs predecessor\n            const currBarStyle = arrayBars[obj.curr[0]].style;\n            const predBarStyle = arrayBars[obj.pred[0]].style;\n            setTimeout(() => {\n                currBarStyle.backgroundColor = 'red';\n                predBarStyle.backgroundColor = 'red';\n                const currBarNewHeight = obj.pred[1];\n                currBarStyle.height = `${currBarNewHeight}px`;\n                setTimeout(() => {\n                    currBarStyle.backgroundColor = '#4169E1';\n                    predBarStyle.backgroundColor = '#4169E1';\n                }, 17);\n                //cannot access the 'this' keyword in Promise but this works too\n                //enable buttons after (most) animations play\n                if (index + 1 === animations.length){\n                    this.enableButtons()\n                }\n            }, index * 17);\n        });\n        console.log(animations.length)\n    }\n\n    disableButtons = () => {\n        //disable buttons while animation plays\n        let buttons = document.getElementsByClassName('button');\n        for(let i = 0; i < buttons.length; i++){\n            buttons[i].disabled = true;\n        }\n    }\n\n    enableButtons = () => {\n        //enable buttons after animation plays\n        let buttons = document.getElementsByClassName('button');\n        for(let i = 0; i < buttons.length; i++){\n            buttons[i].disabled = false;\n        }\n    }\n\n    render() {\n        const arrayBars = this.state.array\n        return (\n            <div className=\"page-container\">\n                <h2>Sorting Algorithm Visualizer</h2>\n                <p>This is just a fun side project I always wanted to do. More algorithms will be added soon!</p>\n                <div className=\"button-container\">\n                    <button    \n                        className=\"button\"\n                        onClick={this.resetArray}>Reset Array</button>\n                    {/* <button    \n                        className=\"button\"\n                        onClick={() => {\n                            console.log(this.state.array)\n                            const sorted = mergeSort(this.state.array)\n                            console.log(sorted)\n                            this.handleMergeSort(this.state.array)\n                            // mergeSortHelper(this.state.array)\n                            // const sortedArray = mergeSortHelper(this.state.array)\n                            // console.log(sortedArray)\n                        }}>Merge Sort</button> */}\n                    <button    \n                        className=\"button\"\n                        onClick={() => this.handleInsertionSort()}>insertion Sort</button>\n                </div>\n                <div className=\"array-container\">\n                    {arrayBars.map((value, index) => (\n                        <div \n                            className = \"array-bar\" \n                            key = {index}\n                            style={{height: `${value}px`, width: `${80/this.state.arraySize}vw`}}></div>\n                    ))}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SortingVisualization\n","import logo from './logo.svg';\nimport './App.css';\nimport SortingVisualization from './SortingVisualization';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualization />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}