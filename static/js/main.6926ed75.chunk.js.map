{"version":3,"sources":["logo.svg","SortingAlgoAnimations/insertionSort.js","SortingVisualization.js","App.js","reportWebVitals.js","index.js"],"names":["insertionSort","array","animations","i","length","key","j","push","curr","pred","SortingVisualization","state","arraySize","resetArray","getRandomInt","setState","max","Math","floor","random","handleInsertionSort","this","disableButtons","arrayBars","document","getElementsByClassName","forEach","obj","index","currBarStyle","style","predBarStyle","setTimeout","backgroundColor","currBarNewHeight","height","enableButtons","console","log","buttons","disabled","className","onClick","map","value","width","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6926ed75.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export function insertionSort(array){\n    const animations = []\n    for(let i = 1; i < array.length; i++){\n        const key = array[i];\n        let j = i - 1;\n        while(j >= 0 && key < array[j]){\n            animations.push({curr: [j+1, array[j+1]], pred: [j, array[j]] })\n            array[j+1] = array[j]\n            j-=1\n        }\n        animations.push({curr: [j+1, array[j+1]], pred: [i, key] })\n        array[j+1] = key\n    }\n    return animations\n}\n","import React, { Component } from 'react';\nimport {mergeSort} from './SortingAlgoAnimations/mergeSort';\nimport {insertionSort} from './SortingAlgoAnimations/insertionSort';\nimport './SortingVisualization.css';\n\nexport class SortingVisualization extends Component {\n    state = {\n        array : [],\n        arraySize: 100\n    }\n\n    componentDidMount(){\n        this.resetArray()\n    }\n\n    resetArray = () => {\n        const array = [];\n        for(let i =0; i<this.state.arraySize; i++){\n            array.push(this.getRandomInt(300));\n        }\n        this.setState({array: array})\n    }\n\n    getRandomInt = (max) => {\n        return Math.floor(Math.random() * Math.floor(max))\n    }\n\n    handleInsertionSort = function () {\n        this.disableButtons();\n        const animations = insertionSort(this.state.array);\n        const arrayBars = document.getElementsByClassName('array-bar');\n        // new Promise(function(resolve, request){\n        //     animations.forEach((obj, index) => {\n        //         //current vs predecessor\n        //         const currBarIndex = obj.curr[0];\n        //         const predBarIndex = obj.pred[0];\n        //         const currBarStyle = arrayBars[currBarIndex].style;\n        //         const predBarStyle = arrayBars[predBarIndex].style;\n        //         setTimeout(() => {\n        //             currBarStyle.backgroundColor = 'red';\n        //             predBarStyle.backgroundColor = 'red';\n        //             const currBarNewHeight = obj.pred[1];\n        //             currBarStyle.height = `${currBarNewHeight}px`;\n        //             setTimeout(() => {\n        //                 currBarStyle.backgroundColor = '#4169E1';\n        //                 predBarStyle.backgroundColor = '#4169E1';\n        //             }, 18);\n        //             //cannot access the 'this' keyword in Promise but this works too\n        //             //enable buttons after (most) animations play\n                    \n        //         }, index * 18);\n        //     });\n        // }).then(this.enableButtons)\n        animations.forEach((obj, index) => {\n            //current vs predecessor\n            const currBarStyle = arrayBars[obj.curr[0]].style;\n            const predBarStyle = arrayBars[obj.pred[0]].style;\n            setTimeout(() => {\n                currBarStyle.backgroundColor = 'red';\n                predBarStyle.backgroundColor = 'red';\n                const currBarNewHeight = obj.pred[1];\n                currBarStyle.height = `${currBarNewHeight}px`;\n                setTimeout(() => {\n                    currBarStyle.backgroundColor = '#4169E1';\n                    predBarStyle.backgroundColor = '#4169E1';\n                }, 17);\n                //cannot access the 'this' keyword in Promise but this works too\n                //enable buttons after (most) animations play\n                if (index + 1 === animations.length){\n                    this.enableButtons()\n                }\n            }, index * 17);\n        });\n        console.log(animations.length)\n    }\n\n    disableButtons = () => {\n        //disable buttons while animation plays\n        let buttons = document.getElementsByClassName('button');\n        for(let i = 0; i < buttons.length; i++){\n            buttons[i].disabled = true;\n        }\n    }\n\n    enableButtons = () => {\n        //enable buttons after animation plays\n        let buttons = document.getElementsByClassName('button');\n        for(let i = 0; i < buttons.length; i++){\n            buttons[i].disabled = false;\n        }\n    }\n\n    render() {\n        const arrayBars = this.state.array\n        return (\n            <div className=\"page-container\">\n                <h2>Sorting Algorithm Visualizer</h2>\n                <p>This is just a fun side project I always wanted to do. More algorithms will be added soon!</p>\n                <div className=\"button-container\">\n                    <button    \n                        className=\"button\"\n                        onClick={this.resetArray}>Reset Array</button>\n                    {/* <button    \n                        className=\"button\"\n                        onClick={() => {\n                            console.log(this.state.array)\n                            const sortedArray = mergeSort(this.state.array)\n                            console.log(sortedArray)\n                        }}>Merge Sort</button> */}\n                    <button    \n                        className=\"button\"\n                        onClick={() => this.handleInsertionSort()}>insertion Sort</button>\n                </div>\n                <div className=\"array-container\">\n                    {arrayBars.map((value, index) => (\n                        <div \n                            className = \"array-bar\" \n                            key = {index}\n                            style={{height: `${value}px`, width: `${80/this.state.arraySize}vw`}}></div>\n                    ))}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SortingVisualization\n","import logo from './logo.svg';\nimport './App.css';\nimport SortingVisualization from './SortingVisualization';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualization />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}